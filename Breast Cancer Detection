from google.colab import drive
drive.mount('/content/drive')
import torch
import torchvision
import torchvision.transforms as transforms
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import matplotlib.pyplot as plt
import numpy as np
from tqdm import tqdm
classes = ('calcification-benign', 'calcification-malignant', 'healthy', 'mass-benign',
           'mass-malignant')
train_set_path = '/content/drive/MyDrive/breast cancer/train'
test_set_path = '/content/drive/MyDrive/breast cancer/test'
transform=transforms.Compose([transforms.ToTensor(),transforms.Normalize((0.5,0.5,0.5),(0.5,0.5,0.5))])
 
train_set=torchvision.datasets.ImageFolder(root=train_set_path,transform=transform)
test_set=torchvision.datasets.ImageFolder(root=test_set_path,transform=transform)
 
trainloader=torch.utils.data.DataLoader(train_set,batch_size=8,shuffle=True,num_workers=2)
testloader=torch.utils.data.DataLoader(test_set,batch_size=8,shuffle=True,num_workers=2)
len(trainloader)
len(testloader)
model = nn.Sequential(
            nn.Conv2d(3, 18, kernel_size=5, padding=0),
            nn.ReLU(),

            nn.MaxPool2d(2, 2), # output: 18 x 110 x 110
            nn.BatchNorm2d(18),
 
            nn.Conv2d(18, 54, kernel_size=5, stride=1, padding=0),
            nn.ReLU(),

            nn.MaxPool2d(2, 2), # output: 54 x 53 x 53
            nn.BatchNorm2d(54),
 
            nn.Conv2d(54, 216, kernel_size=4, stride=1, padding=0),
            nn.ReLU(),

            nn.MaxPool2d(5, 5), # output: 288 x 10 x 10
            nn.BatchNorm2d(216),

            nn.Flatten(), 
            nn.Linear(216*10*10, 1024),
            nn.ReLU(),
            nn.Linear(1024, 512),
            nn.ReLU(),
            nn.Linear(512, 5))

device=torch.device("cuda:0" if torch.cuda.is_available else "cpu")
model.to(device)
 
loss_fn=nn.CrossEntropyLoss()
optimizer=optim.SGD(model.parameters(),lr=0.001,momentum=0.9)
train_losses=[]
train_accu=[]
def train(epoch):
  print('\nEpoch : %d'%epoch)
   
  model.train()
 
  running_loss=0
  correct=0
  total=0
 
  for data in tqdm(trainloader):
     
    inputs,labels=data[0].to(device),data[1].to(device)
     
    optimizer.zero_grad()
    outputs=model(inputs)
    loss=loss_fn(outputs,labels)
    loss.backward()
    optimizer.step()
 
    running_loss += loss.item()
     
    _, predicted = outputs.max(1)
    total += labels.size(0)
    correct += predicted.eq(labels).sum().item()
       
  train_loss=running_loss/len(trainloader)
  accu=100.*correct/total
   
  train_accu.append(accu)
  train_losses.append(train_loss)
  print('Train Loss: %.3f | Accuracy: %.3f'%(train_loss,accu))
eval_losses=[]
eval_accu=[]
 
def test(epoch):
  model.eval()
 
  running_loss=0
  correct=0
  total=0
 
  with torch.no_grad():
    for data in tqdm(testloader):
      images,labels=data[0].to(device),data[1].to(device)
       
      outputs=model(images)
 
      loss= loss_fn(outputs,labels)
      running_loss+=loss.item()
       
      _, predicted = outputs.max(1)
      total += labels.size(0)
      correct += predicted.eq(labels).sum().item()
   
  test_loss=running_loss/len(testloader)
  accu=100.*correct/total
 
  eval_losses.append(test_loss)
  eval_accu.append(accu)
 
  print('Test Loss: %.3f | Accuracy: %.3f'%(test_loss,accu)) 
epochs=20

for epoch in range(1,epochs+1): 
    train(epoch)
    test(epoch)

    m=torch.save({
            'epoch': epoch,
            'model_state_dict': model.state_dict(),
            'optimizer_state_dict': optimizer.state_dict(),
            'loss': loss_fn,
            }, '/content/drive/MyDrive/1-epoch{}.pth'.format(epoch))

plt.plot(train_accu,'-o')
plt.plot(eval_accu,'-o')
plt.xlabel('epoch')
plt.ylabel('accuracy')
plt.legend(['Train','Valid'])
plt.title('Train vs Valid Accuracy')
plt.show()
#plot losses
plt.plot(train_losses,'-o')
plt.plot(eval_losses,'-o')
plt.xlabel('epoch')
plt.ylabel('losses')
plt.legend(['Train','Valid'])
plt.title('Train vs Valid Losses')
plt.show()
examples = enumerate(testloader)
batch_idx, (example_data, example_targets) = next(examples)
example_data, example_targets = example_data.cuda(), example_targets.cuda()
example_data.shape
with torch.no_grad():
  output = model(example_data)
with torch.no_grad():
  output = model(example_data)
  import matplotlib.pyplot as plt
fig1 = plt.figure()
for i in range(8):
  plt.subplot(1,8,i+1)
  plt.tight_layout()
  plt.imshow(example_data[i][0].cpu(), cmap='gray', interpolation='none')
  plt.title("{}".format(example_targets[i]))
  plt.xticks([])
  plt.yticks([])
fig1
fig2 = plt.figure()
for i in range(8):
  plt.subplot(1,8,i+1)
  plt.tight_layout()
  plt.imshow(example_data[i][0].cpu(), cmap='gray', interpolation='none')
  plt.title('{}'.format(output.data.max(1, keepdim=True)[1][i].item()))
  plt.xticks([])
  plt.yticks([])
  fig2

